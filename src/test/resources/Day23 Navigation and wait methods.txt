Day-23
-------
wait commands
Why?
Application response is slower than our script response!
wait statements will be used to solve synchronization problem in automation.


Thread.sleep(ms)

implicit wait
explicite wait/ fluent state

sleep() : provided by java itself( not selenium command)
------------
Adv:
1) easy to use

DisAdvantage:

1) if the time is not sufficient then you will get exception
2) it will wait for maximum time out. this will reduce the perforemce script.
3) multiple times 

implicit wait
----------
Adv:
1) single time/one statement
2) it will not wait till maximum time if the element is availble
3) Applicable for all the elements
4) easy to use

Disadvantge:
1) if the time is not sufficient then you will get exception

Explicit wait
------------
declartion => WebDriverWait mywait=new WebDriverWait(driver,Duration.ofSeconds(10));
usage => WebElement useranme=mywait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("")));
=>We have many Expected Condition.

1) Conditional based, it will work more effectively.
2) finding element is inclusive
3) it will wait for condition to be true, the consider the time
4) we need to write multiple statements for multiple elements 


Fluent wait
------
 // Waiting 30 seconds for an element to be present on the page, checking
   // for its presence once every 5 seconds.
  
//Declaration
 Wait<WebDriver> mywait = new FluentWait<WebDriver>(driver)
       .withTimeout(Duration.ofSeconds(30L))
       .pollingEvery(Duration.ofSeconds(5L))
       .ignoring(NoSuchElementException.class);


 	//usage
	WebElement username=(WebElement) 				mywait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@placeholder='Username']")));
	username.sendKeys("Admin");


Navigational commands
-----------------
navigate().to(url)   same as driver.get(url)
navigate().forward()
navigate().back()
navigate().refresh()

driver.navigate().to(url);

driver.manage().window().maximize();

"https://www.google.com"   -----> string

URL myurl=new URL("https://www.google.com")

navigate().to(URL) 
    accepts url is URL & String format

driver.get()  
	accepts only String format









